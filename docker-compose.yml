services:
  # Base de datos PostgreSQL
  db:
    image: postgres:17
    container_name: netflix_mvp_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-DataBaseNetflix}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./dump.backup:/dump.backup:ro
    command: >
      postgres -c listen_addresses='*'
               -c shared_buffers=256MB
               -c max_connections=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d DataBaseNetflix"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Restaurador de base de datos 
  db-restore:
    image: postgres:17
    container_name: netflix_mvp_db_restore
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-DataBaseNetflix}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-1234}
      PGPASSWORD: ${POSTGRES_PASSWORD:-1234}
    volumes:
      - ./dump.backup:/dump.backup:ro
      - ./init-db.sh:/init-db.sh:ro
    depends_on:
      db:
        condition: service_healthy
    command: bash /init-db.sh
    restart: "no"

  # Backend
  backend:
    build: .
    container_name: netflix_mvp_backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app:cached
      - ./media:/app/media
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  #Frontend
  frontend:
    image: node:20-alpine
    container_name: netflix_mvp_frontend
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host"
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_BACKEND_URL=http://backend:8000
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  pgdata:
